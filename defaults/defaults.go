// Code generated by go-bindata.
// sources:
// data/defaults.json
// DO NOT EDIT!

package defaults

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x96\xc1\x6e\xa3\x3c\x10\x80\xef\x79\x0a\xc4\xb9\x1d\x42\x92\xea\xff\x17\x69\xd5\x97\xe8\x61\xa5\xd5\x1e\x5c\x18\x60\x54\xe3\xf1\xda\x43\x28\xad\xfa\xee\x2b\xb3\xc9\x6e\x93\x50\x6d\x0a\x4d\x8f\xc6\xc3\xf7\x8d\x3d\x66\xcc\xf3\x22\x8a\xe2\x2d\x3a\x4f\x6c\xe2\x2c\x8a\xb7\x29\x2c\x61\x19\x5f\x85\xc7\x9e\x5b\x97\xa3\x8f\xb3\xe8\xfb\x62\x11\x45\x51\xf4\x1c\x4b\x6f\x31\x84\xd5\x22\x36\xbe\x8a\xe2\xd6\xe9\xfd\x30\x4b\x12\xb2\x98\xd7\x0c\x06\x25\xb1\x5a\x91\x09\x11\x1d\x52\x55\x4b\x9c\x45\x4b\xb8\x79\xb9\x3a\x0f\x63\x50\xae\xc9\x02\x99\x92\x93\x89\x8c\x4a\xf3\xbd\xd2\x64\xa1\xc1\xe4\x96\xec\x44\x0a\x4a\xbd\x0c\x84\xa9\x0b\xb1\x20\xec\x6b\x6a\x94\x6b\x87\x5d\x99\xcc\xc9\x6b\xcc\x1f\x80\xd0\xa3\xdb\xa2\x9b\xc5\x2a\x73\x36\x25\x55\x33\x96\xe5\x1b\xe5\x86\x02\x85\x34\x9a\x7e\x74\x77\xcf\x02\x75\xb5\x12\xf2\x81\x00\xea\x41\x35\x8a\x20\xe7\xe6\x30\xab\x14\x96\x67\x66\x35\x6c\x51\x20\x35\xea\x89\x8d\xea\xfc\x5b\xb0\x11\x9a\x3f\xc2\xf9\x2c\x49\xee\x59\xe0\x6f\x82\xaa\x28\x1c\xfa\x11\xe6\xfa\x8d\x04\xc7\x90\x94\x2b\x53\xab\x27\xb2\xf3\x30\x5d\x85\x32\x97\x41\x05\x1a\x39\x39\x03\xef\x21\x6c\x80\xca\xbc\x3c\x3d\x47\xef\xca\xc2\x82\xf4\x0f\x60\xda\xe9\x08\x31\x8f\x60\x74\x72\x74\x08\xdf\x43\xd0\x2b\x20\x9e\x03\x50\x96\x80\x2c\x95\x3d\xb0\xab\xa6\xaf\xa4\xe9\xf1\x51\xd0\x99\xa1\x6d\x85\xe2\x3a\xd5\x7d\xcc\x51\x9b\x4e\x99\x5f\xe1\x7d\xbb\x21\xfe\x00\x48\x3e\xab\x4e\x64\xc3\x8d\x32\xb3\xd8\x9d\x94\xbb\x96\x15\x4a\x24\xf8\x28\x93\x51\x1e\xf3\xd6\x21\x90\x09\x55\xe7\x02\x81\xcd\xd0\x52\x3b\xbc\x17\x66\xed\x13\x5f\x73\x17\x54\xb7\x41\xc3\x46\xf7\x5f\xd3\x11\xd9\x91\xad\x30\x83\xcb\xa8\x66\x18\x0e\xa9\xb2\x45\x53\x98\xa1\x7b\x41\x98\xfc\x7d\x8d\x84\x69\x87\x9e\xf5\x16\x5d\xfa\x3a\x26\xbb\x59\x1f\x78\x56\x23\x8b\x9a\xa6\x59\x7d\x8e\x66\xfd\x39\x9a\xcd\x4c\x4d\x57\xb3\x6a\x68\x7f\xf7\x19\x94\x23\x8f\xf1\xe9\x75\xba\x9b\x16\xcc\xeb\x10\x32\x5d\xd3\x6a\x71\x2a\x24\x7b\x2a\xb2\x85\xf1\xe9\x41\xc0\x04\x0d\x5f\x33\x34\x7d\xb8\x28\x41\x43\xc5\x5c\x69\xfc\xb3\x77\x3f\x5b\x74\xfd\xdd\xee\xbd\xbb\x6f\x77\x27\xeb\x7c\xf5\xc2\xb8\xfa\xc8\xed\xa5\x1d\x7e\x2f\x6b\xf6\xb2\x1f\xa7\x07\xde\x2c\xfd\xb2\x5e\xae\x42\x8c\x75\x2c\x9c\xf3\xf0\xed\xb5\xc5\xbf\x3f\xfd\x31\xf6\xea\x82\xec\xf5\x05\xd9\x9b\x0b\xb2\x21\x54\x90\x72\xf4\xd0\xf0\x13\x69\xad\x06\xc5\x7a\xf3\xdf\xff\x1f\x65\xd8\xfd\xee\xb2\xab\xce\xc6\x2e\xa2\xe8\xc7\xe2\x65\xf1\x2b\x00\x00\xff\xff\x83\x7c\xe6\x1c\xd8\x0c\x00\x00")

func defaultsJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultsJson,
		"defaults.json",
	)
}

func defaultsJson() (*asset, error) {
	bytes, err := defaultsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "defaults.json", size: 3288, mode: os.FileMode(420), modTime: time.Unix(1517407658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"defaults.json": defaultsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"defaults.json": &bintree{defaultsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

