// Code generated by go-bindata.
// sources:
// data/defaults.json
// DO NOT EDIT!

package defaults

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\xcb\x6e\xa3\x4a\x10\x86\xf7\x3c\x45\x8b\xb5\x5d\x80\x9d\x6c\xd8\x9c\x97\xf0\xe2\x48\xa3\x59\x74\xa0\x80\x92\xe9\xcb\x74\x17\xc6\x24\xca\xbb\x8f\x9a\xb1\x67\x62\x9b\x48\x36\x44\x59\x42\x57\x7f\xff\x5f\x17\x55\xbf\x45\x42\xc4\x07\x74\x9e\x8c\x8e\x73\x11\x1f\x32\x48\x21\x8d\x57\xe1\xb7\x37\x9d\x2b\xd0\xc7\xb9\xf8\x11\x45\x42\x08\xf1\x16\xf3\x60\x31\x84\x35\xcc\x36\x5e\x89\xb8\x73\xed\xf9\x33\x4f\x12\xb2\x58\x34\x06\x34\x72\x62\x5b\x49\x3a\x44\xf4\x48\x75\xc3\x71\x2e\x52\x78\x7e\x5f\xdd\x87\xd1\xc8\x6b\xb2\x40\xba\x32\xc9\x4c\x46\xdd\x9a\x17\xd9\x92\x05\x85\xc9\x7f\x64\x67\x52\x90\x9b\x34\x10\xe6\x26\x62\x81\x8d\x6f\x48\x49\xd7\x8d\x55\x99\xcd\x29\x1a\x2c\xf6\x40\xe8\xd1\x1d\xd0\x2d\x62\x55\x85\xd1\x15\xd5\x0b\xd2\xf2\x4a\xba\xb1\x41\xc1\x86\x1a\x26\xab\x7b\x17\xa8\x6f\x24\x93\x0f\x04\x90\x7b\xa9\x24\x41\x61\xd4\xa5\xab\x0c\xd2\x3b\x5d\x8d\x25\x0a\x24\x25\x5f\x8d\x96\xbd\xff\x0c\x36\x41\xf3\x57\x38\x9f\x27\xc9\x8b\x61\xf8\x67\x50\x96\xa5\x43\x3f\xc1\xdc\x7e\x62\x70\x0a\x49\x85\xd4\x8d\x7c\x25\xbb\x0c\xd3\xd7\xc8\x4b\x19\x54\xa2\xe6\x9b\x19\x78\x84\xf0\x04\x54\x15\xd5\xed\x1c\x3d\xe4\xc2\x02\x0f\x7b\xd0\xdd\x7c\x04\xeb\x23\xe8\x36\xb9\x1a\xc2\x47\x08\xed\x06\xc8\x2c\x01\x48\x4b\x40\x96\xaa\x01\x8c\xab\xe7\x67\xa2\x06\x3c\x32\x3a\x3d\xae\xad\xd0\x5c\x27\xfb\xaf\x19\xb5\xf9\x94\xe5\x1d\x3e\xaf\x1b\x32\x5f\x00\x29\x16\xf5\x89\x6c\x78\x51\x16\x36\xbb\xe7\xea\xb4\xb2\x42\x8b\x18\x8f\x3c\x81\xba\x62\x95\x7a\x24\x69\xa9\xc6\xcf\xf1\xb6\xb1\xa8\x4b\x3d\x2e\x14\x08\x87\x7f\x36\x7b\x38\x76\xe8\x4d\x7b\x40\x97\x7d\x8c\xc9\x9f\xb7\x17\x3a\x9b\x09\xcb\xf3\x64\x36\xdf\x23\xb3\xfd\x1e\x99\xa7\x85\x32\x7d\x63\xa4\xa2\xf3\x73\xa4\x91\xaf\x74\xb4\xcf\xd6\xd9\xe9\x98\xb1\x68\x42\xc8\x7c\x99\xae\x65\x27\x83\xd9\x5b\x21\x5b\x6a\x9f\x5d\x04\xcc\x90\x31\x6b\x03\x6a\x08\x6f\x17\xb4\x50\x1b\x53\xb7\xf8\xb7\x76\xbf\x3a\x74\xc3\xee\x74\x6f\xf7\xff\xee\x26\xcf\x0f\x17\xa6\xa4\x23\x21\x7e\x46\xef\xd1\xef\x00\x00\x00\xff\xff\x71\xb0\x27\x7a\x41\x0a\x00\x00")

func defaultsJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultsJson,
		"defaults.json",
	)
}

func defaultsJson() (*asset, error) {
	bytes, err := defaultsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "defaults.json", size: 2625, mode: os.FileMode(420), modTime: time.Unix(1516208489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"defaults.json": defaultsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"defaults.json": &bintree{defaultsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

