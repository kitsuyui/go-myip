// Code generated by go-bindata.
// sources:
// data/defaults.json
// DO NOT EDIT!

package defaults

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\xc1\x6e\xa3\x3c\x10\xc7\xef\x3c\x85\xc5\x39\x19\x42\xd2\x5e\x90\x3e\xf5\x25\x72\xf8\xa4\xd5\x1e\x1c\x18\x60\x14\xe3\xf1\xda\x26\x84\x56\x7d\xf7\x95\xd9\x64\xb7\x49\xa8\x94\x40\xd5\x23\x78\xfc\xfb\xff\xc7\x33\x9a\x79\x8b\x84\x88\x0f\x68\x1d\xb1\x8e\x33\x11\x1f\x52\x58\xc1\x2a\x5e\x84\xdf\x8e\x5b\x9b\xa3\x8b\x33\xf1\x23\x8a\x84\x10\xe2\x2d\xf6\xbd\xc1\x10\x56\x7b\x6f\xe2\x85\x88\x5b\xab\xce\x9f\x59\x92\x90\xc1\xbc\x66\xd0\xe8\x13\xa3\x24\xe9\x10\xd1\x21\x55\xb5\x8f\x33\xb1\x82\xe7\xf7\xc5\x7d\x18\x8d\x7e\x49\x06\x48\x97\x9c\x4c\x64\x54\x8a\x77\x52\x91\x81\x06\x93\x17\x32\x13\x29\xe8\xeb\x55\x20\x4c\x4d\xc4\x80\x67\x57\x53\x23\x6d\x3b\xbc\xca\x64\x4e\x5e\x63\xbe\x07\x42\x87\xf6\x80\x76\x16\xab\xcc\x59\x97\x54\xcd\x48\xcb\x35\xd2\x0e\x05\x0a\x36\x9a\x7e\xf4\x75\xef\x02\x75\xb5\xf4\xe4\x02\x01\xe4\x5e\x36\x92\x20\xe7\xe6\xd2\x55\x0a\xab\x3b\x5d\x0d\x4f\x14\x48\x8d\x7c\x65\x2d\x3b\xf7\x19\x6c\x84\xe6\xae\x70\x2e\x4b\x92\x1d\x7b\xf8\x67\x50\x16\x85\x45\x37\xc2\xdc\x7c\x62\x70\x0c\x49\xb9\xd4\xb5\x7c\x25\x33\x0f\xd3\x55\xe8\xe7\x32\xa8\x40\xed\x6f\x7a\xe0\x11\xc2\x13\x50\x99\x97\xb7\x7d\xf4\x90\x0b\x03\xbe\xdf\x83\x6e\xa7\x23\xbc\x3e\x82\x56\xc9\x55\x13\x3e\x42\x50\x6b\x20\x9e\x03\x90\x86\x80\x0c\x95\x3d\xb0\xad\xa6\x67\xd2\xf4\x78\xf4\x68\xf5\x30\xb6\x42\x71\xad\xec\xbe\xa6\xd5\xa6\x53\xe6\x57\xf8\x3c\x6e\x88\xbf\x00\x92\xcf\xaa\x13\x99\xb0\x51\x66\x16\xbb\xf3\xe5\x69\x64\x85\x12\x79\x3c\xfa\xc9\x28\x87\x79\x6b\x11\x48\x87\xaa\x73\x81\xc0\x7a\x18\xa9\x1d\xee\x3c\xb3\x72\x89\xab\xb9\x0b\x52\x2f\x41\x86\xb5\xea\xff\x4b\x47\xc4\xae\xd4\x0a\x3d\x68\x69\xd9\x0c\x9f\x83\x55\x36\xa8\x0b\x3d\x4c\x2f\x08\x87\x7f\xd6\x48\x38\xb6\xe8\x58\x1d\xd0\xa6\x1f\x63\xb2\xe7\xcd\x85\xce\x7a\x24\xa9\x69\x32\xeb\xef\x91\xd9\x7c\x8f\xcc\xd3\x4c\x99\xae\x66\xd9\xd0\x79\xf7\x69\xf4\x57\x3a\xda\xa5\xcb\xf4\x74\xec\x31\xaf\x43\xc8\x74\x99\x56\x79\x2b\x83\xd9\x5b\x21\x53\x68\x97\x5e\x04\x4c\x90\xe1\x25\x43\xd3\x87\x45\x09\x0a\x2a\xe6\x4a\xe1\xdf\xb7\xfb\xd5\xa2\xed\xb7\xa7\x7b\xdb\xff\xb7\x37\x79\x7e\xb8\x30\x26\x1d\x09\xf1\x33\x7a\x8f\x7e\x07\x00\x00\xff\xff\x55\x5d\x57\xe0\xae\x0a\x00\x00")

func defaultsJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultsJson,
		"defaults.json",
	)
}

func defaultsJson() (*asset, error) {
	bytes, err := defaultsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "defaults.json", size: 2734, mode: os.FileMode(420), modTime: time.Unix(1517400317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"defaults.json": defaultsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"defaults.json": &bintree{defaultsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

